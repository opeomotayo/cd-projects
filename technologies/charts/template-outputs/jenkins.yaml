---
# Source: jenkins/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-jenkins
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
---
# Source: jenkins/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-jenkins
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
type: Opaque
data:
  jenkins-admin-password: "VU5vdDJhWHBmM1IyOXR2VmR6YWJ6dw=="
  jenkins-admin-user: "YWRtaW4="
---
# Source: jenkins/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
data:
  apply_config.sh: |-
    set -e
    echo "disable Setup Wizard"
    # Prevent Setup Wizard when JCasC is enabled
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.UpgradeWizard.state
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.InstallUtil.lastExecVersion
    echo "download plugins"
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt /var/jenkins_home;
    rm -rf /usr/share/jenkins/ref/plugins/*.lock
    version () { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
    if [ -f "/usr/share/jenkins/jenkins.war" ] && [ -n "$(command -v jenkins-plugin-cli)" 2>/dev/null ] && [ $(version $(jenkins-plugin-cli --version)) -ge $(version "2.1.1") ]; then
      jenkins-plugin-cli --verbose --war "/usr/share/jenkins/jenkins.war" --plugin-file "/var/jenkins_home/plugins.txt" --latest true;
    else
      /usr/local/bin/install-plugins.sh `echo $(cat /var/jenkins_home/plugins.txt)`;
    fi
    echo "copy plugins to shared volume"
    # Copy plugins to shared volume
    yes n | cp -i /usr/share/jenkins/ref/plugins/* /var/jenkins_plugins/;
    echo "finished initialization"
  plugins.txt: |-
    configuration-as-code
    git
    kubernetes
    workflow-aggregator
    blueocean
    credentials-binding
    docker-build-step
    docker-plugin
    docker-workflow
    github-oauth
    github-pullrequest
    job-dsl
    kubernetes-cli
    kubernetes-credentials
    kubernetes-credentials-provider
    kubernetes-client-api
    ldap
    nexus-artifact-uploader
    matrix-auth
    parameterized-trigger
    role-strategy
    slack
    sonar
---
# Source: jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-jenkins-jenkins-jcasc-config"
  namespace: default
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
    RELEASE-NAME-jenkins-jenkins-config: "true"
data:
  jcasc-default-config.yaml: |-
    jenkins:
      authorizationStrategy:
        loggedInUsersCanDoAnything:
          allowAnonymousRead: false
      securityRealm:
        local:
          allowsSignup: false
          enableCaptcha: false
          users:
          - id: "${chart-admin-username}"
            name: "Jenkins Admin"
            password: "${chart-admin-password}"
      disableRememberMe: false
      mode: NORMAL
      numExecutors: 1
      labelString: ""
      projectNamingStrategy: "standard"
      markupFormatter:
        plainText
      clouds:
      - kubernetes:
          containerCapStr: "10"
          defaultsProviderTemplate: ""
          connectTimeout: "5"
          readTimeout: "15"
          jenkinsUrl: "http://RELEASE-NAME-jenkins.default.svc.cluster.local:8080"
          jenkinsTunnel: "RELEASE-NAME-jenkins-agent.default.svc.cluster.local:50000"
          maxRequestsPerHostStr: "32"
          name: "kubernetes"
          namespace: "default"
          serverUrl: "https://kubernetes.default"
          podLabels:
          - key: "jenkins/RELEASE-NAME-jenkins-agent"
            value: "true"
          templates:
            - name: "default"
              namespace: "default"
              id: a09ee9bdc755a04a117a6392bc42fe083fe3d242fae8195361c6e377b524ee76
              containers:
              - name: "jnlp"
                alwaysPullImage: false
                args: "^${computer.jnlpmac} ^${computer.name}"
                command: 
                envVars:
                  - envVar:
                      key: "JENKINS_URL"
                      value: "http://RELEASE-NAME-jenkins.default.svc.cluster.local:8080/"
                image: "jenkins/inbound-agent:4.11.2-4"
                privileged: "false"
                resourceLimitCpu: 512m
                resourceLimitMemory: 512Mi
                resourceRequestCpu: 256m
                resourceRequestMemory: 256Mi
                runAsUser: 
                runAsGroup: 
                ttyEnabled: false
                workingDir: /home/jenkins/agent
              idleMinutes: 0
              instanceCap: 2147483647
              label: "RELEASE-NAME-jenkins-agent "
              nodeUsageMode: "NORMAL"
              podRetention: Never
              showRawYaml: true
              serviceAccount: "default"
              slaveConnectTimeoutStr: "100"
              yamlMergeStrategy: override
      crumbIssuer:
        standard:
          excludeClientIPFromCrumb: true
    security:
      apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true
    unclassified:
      location:
        adminAddress: 
        url: https://jenkins.opeomotayo.net
---
# Source: jenkins/templates/home-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-jenkins
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: jenkins/templates/crbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins
rules:
- apiGroups:
  - '*'
  resources:
  - statefulsets
  - services
  - replicationcontrollers
  - replicasets
  - podtemplates
  - podsecuritypolicies
  - pods
  - pods/log
  - pods/exec
  - podpreset
  - poddisruptionbudget
  - persistentvolumes
  - persistentvolumeclaims
  - jobs
  - endpoints
  - deployments
  - deployments/scale
  - daemonsets
  - cronjobs
  - configmaps
  - namespaces
  - events
  - secrets
  - ingress
  verbs:
  - create
  - get
  - watch
  - delete
  - list
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - update
---
# Source: jenkins/templates/crbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts:jenkins
---
# Source: jenkins/templates/rbac.yaml
# This role is used to allow Jenkins scheduling of agents via Kubernetes plugin.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: RELEASE-NAME-jenkins-schedule-agents
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log", "persistentvolumeclaims", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods", "pods/exec", "persistentvolumeclaims"]
  verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: jenkins/templates/rbac.yaml
# The sidecar container which is responsible for reloading configuration changes
# needs permissions to watch ConfigMaps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: RELEASE-NAME-jenkins-casc-reload
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "watch", "list"]
---
# Source: jenkins/templates/rbac.yaml
# We bind the role to the Jenkins service account. The role binding is created in the namespace
# where the agents are supposed to run.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: RELEASE-NAME-jenkins-schedule-agents
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: RELEASE-NAME-jenkins-schedule-agents
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-jenkins
  namespace: default
---
# Source: jenkins/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: RELEASE-NAME-jenkins-watch-configmaps
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: RELEASE-NAME-jenkins-casc-reload
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-jenkins
  namespace: default
---
# Source: jenkins/templates/jenkins-agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-jenkins-agent
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  ports:
    - port: 50000
      targetPort: 50000
      name: agent-listener
  selector:
    "app.kubernetes.io/component": "jenkins-controller"
    "app.kubernetes.io/instance": "RELEASE-NAME"
  type: ClusterIP
---
# Source: jenkins/templates/jenkins-controller-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-jenkins
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
  selector:
    "app.kubernetes.io/component": "jenkins-controller"
    "app.kubernetes.io/instance": "RELEASE-NAME"
  type: ClusterIP
---
# Source: jenkins/templates/jenkins-controller-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-jenkins
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  serviceName: RELEASE-NAME-jenkins
  replicas: 1
  selector:
    matchLabels:
      "app.kubernetes.io/component": "jenkins-controller"
      "app.kubernetes.io/instance": "RELEASE-NAME"
  template:
    metadata:
      labels:
        "app.kubernetes.io/name": 'jenkins'
        "app.kubernetes.io/managed-by": "Helm"
        "app.kubernetes.io/instance": "RELEASE-NAME"
        "app.kubernetes.io/component": "jenkins-controller"
      annotations:
        checksum/config: efe653547ab1d39877c49780e1f96c355029792deabb8ba873824e220ae12555
    spec:
      securityContext:
    
        runAsUser: 1000
        fsGroup: 1000
        runAsNonRoot: true
      serviceAccountName: "RELEASE-NAME-jenkins"
      initContainers:
        - name: "init"
          image: "jenkins/jenkins:lts-jdk11"
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsUser: 1000
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          resources:
            limits:
              cpu: 1000m
              memory: 2048Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
            - mountPath: /var/jenkins_config
              name: jenkins-config
            - mountPath: /usr/share/jenkins/ref/plugins
              name: plugins
            - mountPath: /var/jenkins_plugins
              name: plugin-dir
            - mountPath: /tmp
              name: tmp-volume
      containers:
        - name: jenkins
          image: "jenkins/jenkins:lts-jdk11"
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsUser: 1000
          args: [ "--httpPort=8080"]
          env:
            - name: SECRETS
              value: /run/secrets/additional
            # added by opeomotayo
            - name: GITHUB_OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: github-oauth-client-secret
                  key: client-secret
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_OPTS
              value: >-
                 -Dcasc.reload.token=$(POD_NAME) 
            - name: JENKINS_OPTS
              value: >-
                 --webroot=/var/jenkins_cache/war 
            - name: JENKINS_SLAVE_AGENT_PORT
              value: "50000"

            - name: CASC_JENKINS_CONFIG
              value: https://raw.githubusercontent.com/opeomotayo/cd-projects/main/technologies/charts/jenkins/ci/jenkins-casc.yaml
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
              name: agent-listener
          startupProbe:
            failureThreshold: 12
            httpGet:
              path: '/login'
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: '/login'
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: '/login'
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 1000m
              memory: 2048Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
              readOnly: false
            - mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
            - mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
              readOnly: false
            - name: sc-config-volume
              mountPath: https://raw.githubusercontent.com/opeomotayo/cd-projects/main/technologies/charts/jenkins/ci/jenkins-casc.yaml
            - name: jenkins-secrets
              mountPath: /run/secrets/additional
              readOnly: true
            - name: jenkins-cache
              mountPath: /var/jenkins_cache
            - mountPath: /tmp
              name: tmp-volume
        - name: config-reload
          image: "kiwigrid/k8s-sidecar:1.15.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LABEL
              value: "RELEASE-NAME-jenkins-jenkins-config"
            - name: FOLDER
              value: "https://raw.githubusercontent.com/opeomotayo/cd-projects/main/technologies/charts/jenkins/ci/jenkins-casc.yaml"
            - name: NAMESPACE
              value: 'default'
            - name: REQ_URL
              value: "http://localhost:8080/reload-configuration-as-code/?casc-reload-token=$(POD_NAME)"
            - name: REQ_METHOD
              value: "POST"
            - name: REQ_RETRY_CONNECT
              value: "10"
          resources:
            {}
          volumeMounts:
            - name: sc-config-volume
              mountPath: "https://raw.githubusercontent.com/opeomotayo/cd-projects/main/technologies/charts/jenkins/ci/jenkins-casc.yaml"
            - name: jenkins-home
              mountPath: /var/jenkins_home

      volumes:
      - name: plugins
        emptyDir: {}
      - name: jenkins-config
        configMap:
          name: RELEASE-NAME-jenkins
      - name: plugin-dir
        emptyDir: {}
      - name: jenkins-secrets
        projected:
          sources:
          - secret:
              name: RELEASE-NAME-jenkins
              items:
                - key: jenkins-admin-user
                  path: chart-admin-username
                - key: jenkins-admin-password
                  path: chart-admin-password
      - name: jenkins-cache
        emptyDir: {}
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: RELEASE-NAME-jenkins
      - name: sc-config-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
---
# Source: jenkins/templates/jenkins-controller-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-4.3.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "RELEASE-NAME"
    "app.kubernetes.io/component": "jenkins-controller"
  annotations:
    kubernetes.io/ingress.class: nginx
  name: RELEASE-NAME-jenkins
spec:
  ingressClassName: "nginx"
  rules:
  - http:
      paths:
      - backend:
          service:
            name: RELEASE-NAME-jenkins
            port:
              number: 8080
        pathType: ImplementationSpecific
    host: "jenkins.opeomotayo.net"
  tls:
    - hosts:
      - jenkins.opeomotayo.net
      secretName: jenkins-production-certificate
---
# Source: jenkins/templates/crbac.yaml
#managed by opeomotayo
---
# Source: jenkins/templates/cred-sealed-secrets/github-oauth-client-secret.yaml
# apiVersion: bitnami.com/v1alpha1
# kind: SealedSecret
# metadata:
#   creationTimestamp: null
#   name: github-oauth-client-secret
#   namespace: jenkins
# spec:
#   encryptedData:
#     client-secret: AgACw6G1bwAdjfhLct2QMmxeC79+S3YWtjmK/EYc7vwHr42o5fVTXY308fKWkbJc54szXF4LUx3cNq4M/nTHhqXFN3eqRPH/leAQAxi+Z61cEYyeWFtshupzzyGTVn87ygX2wi3N9nRzKp48eohxyoI3kZ4Ej1pxZzX6ojQiUI/K+3NQPwFbjH1g45vDLYjIH0harLW1lsaEh1XRRlq+OonIxxx2/4qycnNv4D0JZ43YZ47ehpmP4feulR3HExJDg+jn4KoM0J0+SRF6m5Junols1jI7LbxXbuEpfyLnij0K2cmC2ffYbFf3qX3TKnA0qIt0+kiJeBVUN8UAg6lYrA57nJJ+3dQjopnfZA9bTy9nbteL0aslGwQT8Xnm5JrVll0U6qwiNKVXwTrHSBe0F12OEIZD9NK1Ee9MtoIHrf1MVoBLtlAEEK2XgVxQu7K1NV6X3PuFzzcgSrfDBsOvwzJzHX+df9IZc3R2kx9mDj4SA5gTMjfMGV7VL+J3TpL79gKP8KEkkAOqFyL1vFuQKP0usAdcfPsA+9y8566FiJvJ8l96jQT7skld8eHzflCx1czrsAxvgQlJJHgg6V0ThPPeVD90DnTw/p5sGOKDh1g7w0Vs2kigfa3rTZWsh6Y5HHfw+CZXzJOCmsKc97bc+EJytjewZnLU8VTtS7mmwdO4AjjwB4aaOaq42s1ydmD1qflmyBfrdQW0x+3yFq9tvpivRQ9pb8dHgrU9QXl0wGRDNvvKs6yGxF6qbVZPzwpTmAaHlWh580aYwg==
#   template:
#     data: null
#     metadata:
#       annotations:
#         jenkins.io/credentials-description: github oauth client-secret secret text credential from Kubernetes
#       creationTimestamp: null
#       labels:
#         jenkins.io/credentials-type: secretText
#       name: github-oauth-client-secret
#       namespace: jenkins
#     type: Opaque
---
# Source: jenkins/templates/ingress.yaml
# #managed by opeomotayo
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: jenkins-ingress
#   namespace: jenkins
#   annotations:
#     kubernetes.io/ingress.class: "nginx"
# spec:
#   tls:
#   - hosts:
#       - jenkins.opeomotayo.net
#     secretName: jenkins-production-certificate
#   rules:
#   - host: jenkins.opeomotayo.net
#     http:
#       paths:
#       - backend:
#           service:
#             name: jenkins
#             port:
#               number: 8080
#         path: /
#         pathType: Prefix
---
# Source: jenkins/templates/cred-sealed-secrets/dockerhub-access.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: dockerhub-access
  namespace: jenkins
spec:
  encryptedData:
    password: AgBSANHAy0Mn1wz2/TmWf/eMJ6wqNuDv5Fx73pSt5G1TnAodtGBNVsxO+YmWai7Dcim7YmpM71jV2yONp2bl8JH3GfiSGoi7hYtWLsbaffakK5aT/TP6SazHVywHEh6aVRw37eaXXahiqxyfrt5PZ1aMAbxL8BE7e/UKwWGoHJ4j5lMacadoNx2CMWfrJN9koMq3XQgYVYGgr26w1QCLBeQ1drX6O8N/P528Rtq7zxTjqTnPpJgQrxcgCxDmWQzI9EgqyHlLCMk9v7vmc3aaWdlEali/eL1n1G/mea9zgaEcD8jJuW5yh1L2Lqt4soLt5nmxxJAVA6pcZxXKl2AKclOgdmd138ATg5VN/b3inueL+pyva5jmrd20VgNexYp2E6HfR1S8PNJZEO+XXMlqZKbXz2LqVuxwi1EaR6KGW/qPMa0wh6174P0MD0gFwF2KfQkrY3CxO/gcy3x8cMWFY+g+qwak30ZKnYXrKlrFQucYj9tmn8Nh2usO//+k9rmC8qiVSjPSBM9d02HCLTEhd/9jLU1c7GCCSNa0CDxhhv4oZUsHQZMhFS6SAv+dl+v9QaBcBZEc1ebDyObcGdEiddhauiaQP4e46o52KrlEJXZRFmHR74byXtQPGAprCaQmLfi1Jxq3hgZmdKacv7qKbYL8s0I+AByESrIyJGV/6lrqnJoS3lR/ZnClp1D3UqXTlONkYtYcC+pOIJA=
    username: AgALCbV/XzxuRNTL6seb//5OJM8rvEQ1nDujlo70Ak4Sa3jEk22VqSzj38Ml5pa/LfxDrqAwm3Ipl88Ctf3uunAQ6CWtImBuus4yDwkzINJN7ogexCXesWstU8oWqvpOcS5nXlKvEFYElQ80m2tgN2ReyQphYtP867LD+EdlHHrqhY/6h3KiQUvwCvdwuTISYezbzucYvzKBXY5cMeQAmE2wMF8qVnJnKwakfWvWh3UySApJYKq3gPU/7HZWNlWXXOXz2tXWGlkwWsqCkFXGWPIzaOK63CkzR2Ttey65J1lwfpVFEUJyD/NdnVf95tiHb2gK1Gi7MHuo7/WvgQz8tan2hkMlcIlTTtUKnKQnkHDtkse2gatVZXLkqDMOHaw5ZpT6GkCe16VZe+COa3JBJi4TzlZCSjEr46lksusURBJcMUfl8/H4+hIanyVTk2xuqO6BAxINbNM0ntwNWIY8k75m8D0rIjgJpu8SzKY0yJj8ZVpNDEkp1y8H0lg7TaC+FQKt3SU66aTAPQJufXJC4DaP9ufhYt7/Atr5NAJYBa4RFZHC+7Y6RWuLnjg1GbRsKKKQpgAtzaZneq8I7gwZnq+k3Uj2aWoCEOtHdH2H0uJ9znSadMsZf6qApwMybCXOSTFc00+oglIUdPzj8XuNWawa9JgBqnN/3eRKAbfKvjwc9KjHX9YM6OVxijxMEjHUrGNGU+TRPLcjYkSG
  template:
    data: null
    metadata:
      annotations:
        jenkins.io/credentials-description: credentials from Kubernetes
      creationTimestamp: null
      labels:
        jenkins.io/credentials-type: usernamePassword
      name: dockerhub-access
      namespace: jenkins
    type: Opaque
---
# Source: jenkins/templates/cred-sealed-secrets/github-pat.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: github-pat
  namespace: jenkins
spec:
  encryptedData:
    password: AgByQDmSQKeG+NhuWIltf6rS17HrSvUFmsDzDCWNL2NINmzMDH+Yo4Q4TD9PgfpX9eLrsK5hiAxk2yZFdPjxsXSM05QhaqipJHrg1ncpd3LI3SYiY73IB26szhXvmAWBq1GRdLzb2uqA/1v8vjp0OrrwBbARHfe+Scf5+fHWucM/+6gbmvsXMR8R1XUQJMdjtVIrQRuzjGYDRMAD0tGGIVowTwVt6dQybzuXBNoG3J9Mzu62u0hb2A6+GLv/g2Wkq2ZYfsxj0xwqFNhgXK2KSGJk8OAgMxmKJNVbmA+v/YHFdFra1t6wnrygEJwEzjJ/7lpi+bmDjQ3Pw7OCS3BqIN9gmgTgJPQu2ZiMts4U5dkoYWX9pTfbkl5pB24g+KYQjXAcmHJYb7XCTdlyzG+ClFpZcsndaKvwqi3xk1KihgczVmLGvaeCHBCGjOqjNl1yoVhLDu5iCp4lNp2bC3NTUKmyBFfrnWYNjQGh7FkC7FIGhaRiOcHrO6atYuPHF2PQkpj0B2sx9CONVI1RfVetK8P9EFJC4DIvTiR0G0eWpubmobnSVtvFLhAFXTy5LQgM+mvi5TecZPmNI3A2HV4s/e2xZYyhvgicNjuS3O6PzCqoaeSxSOWWgH9xBl3ytH4P+k5sQzDvEl502WHqWsBQlOwKUUoHHs2+xuFROPfcR+C6PR+k3lI0ZOxqXzaHpKwCS/ulvqPPliEak2qn+hMt1+EK6EyFgYUTbPuBMEp6Bd37qTk6udo1bC8j
    username: AgA5I7aasMilB8xOy0XVoy7hUbiULEdc7vUsr4AH9lmkCV/4fd6ocdukOcSlHw8WGPrXatvgVwdgnTZLxhfHTxan2itAGToFVd3Hf0ndFYmZuyqN/w9x8dHkUZfXwFH7b0axKAg0WxlllZBK4cVKJNEQyLOkTNPLWRpU2bBHRnD0iKlVhEkdCNPNxZLgQVJ2PyOhs3idIRDpKRDkXq96FzjTLSl0Fx2cZm0Erey79xG3LYPh7POVeqC+rmg3EGQz1F/xMxKBxPgnrZgc0YkLl8IedeSRbAfDJnvX/60tbDDfZcbLGYDR6L6Jr3u5K+yZg2UR0/c/BV5oT0h8UT60BV1UCbh15rPNxQh69WzTr7pHbkLr6Y0yn8xGmrRCUOnQ4EJ6Cj01z40zsxj2hDKEqQ7+UXWg7IBVL23cX4dikRvn4Borjzt19bYl3YStHfg01mXv2pnAKnRXecWjnj4PC+3mGtW3EHa/pR4mco66YbfMYIMchajOZgMJ9jk6E4Pkt5/d93bOkze4GkxNm6H8s4cPRIZLUk+TBfNHgY+6Y42F77vT3Mk6ZcyOaTeQFMJ1QWRJfyWOqGffsFOyN9dFVbA3QQGyp+/GwQuqYoSSrrlaKiEGCHh2F8rQMxzM1q6vfPV9rzd1RZOoUaLKmB6qjmdnCeEYjIK97UFS6ZNLzYO9bXxlq2XAdh7a4Zw2nzK7gf38oypqg+pahlgL
  template:
    data: null
    metadata:
      annotations:
        jenkins.io/credentials-description: github-pat credentials from Kubernetes
      creationTimestamp: null
      labels:
        jenkins.io/credentials-type: usernamePassword
      name: github-pat
      namespace: jenkins
    type: Opaque
---
# Source: jenkins/templates/cred-sealed-secrets/sonarqube-token.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: sonarqube-token
  namespace: jenkins
spec:
  encryptedData:
    sonarqube-token: AgA2ZTNvB0tKj4SgjPIKfMMVmPEqQygUFLeO0iqR6DNw/HF0/55nnE2tZ9bbIlu4E+sKXBeSmqtOzwtcn38ekyXBVKCivLLoY6vJAUSdAbMya6dvkxsyMNywFvOQ94xhNU0ibWakr7f8NKiWjMePQyoxkfzYD6/6F5H7mNfaf68ukZjgVP+MAJtQ+OzJdOqck8kU2aHMS0S9BAVM1EXQHyY2NT5WyWAJ3bag0ugO/APP7LIxXe1A7GkKV2odx2tmlcDcDNeiBw41dUL2BLf/iD/FBdJpRPO9o0J13o3Qyi54dDfsOtPXPU73zpAnseDbxxx1a6pA/heedVDJvVWr2Dg8ATAxjG3khJ3MR1mNcW0W0SWfOCCpEFXRmU5RosG1+RJxrkmGq+OoZBDT4i59vZyynyaQHf3AUThz/BvsRkfJ3+bUEcV7hXiRkJnefm9aS7+Nk9uK/9somXuNBTAYOPgQ0KLiGkuB34fmJHQrxIFay8z+zRi7Uy/OqKesYNluoj+8qbqTynk6fc/oHWpg9+nlsomJ5HYtdm249pK8c+HX1E/OdGVoxNRYSHlYRZzAbKLh1C9REFNvJaT5n6C1b0gLe40ZPFsB4u8+1wWhNyj440xLWfOYaK/pkKYC5M1KPXKZPdMoD7itoefmOzCIR8GdwVl51cjZ9l38SFrx6YvDrSxyUOOtXJ/pQxkcF7iovHDLJjg3DD2mZH/9U/0rlmHY7bax+sm1e0Rt5DE19eV61lIXYkPKEm6e
  template:
    data: null
    metadata:
      annotations:
        jenkins.io/credentials-description: secret text credential from Kubernetes
      creationTimestamp: null
      labels:
        jenkins.io/credentials-type: secretText
      name: sonarqube-token
      namespace: jenkins
    type: Opaque
---
# Source: jenkins/templates/tests/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jenkins-tests
  namespace: default
  annotations:
    "helm.sh/hook": test
data:
  run.sh: |-
    @test "Testing Jenkins UI is accessible" {
      curl --retry 48 --retry-delay 10 RELEASE-NAME-jenkins:8080/login
    }
---
# Source: jenkins/templates/tests/jenkins-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-ui-test-sd0et"
  namespace: default
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: "test-framework"
      image: "bats/bats:1.2.1"
      command:
        - "bash"
        - "-c"
      args:
        - |
          # copy bats to tools dir
          set -ex
          cp -R /opt/bats /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: RELEASE-NAME-ui-test
      image: jenkins/jenkins:2.375.2-jdk11
      command: ["/tools/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  volumes:
  - name: tests
    configMap:
      name: RELEASE-NAME-jenkins-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never
